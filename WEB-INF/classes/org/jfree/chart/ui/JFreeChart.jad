// Decompiled by DJ v3.5.5.77 Copyright 2003 Atanas Neshkov  Date: 2003/11/3 ¤U¤È 04:16:43
// Home Page : http://members.fortunecity.com/neshkov/dj.html  - Check often for new version!
// Decompiler options: packimports(3) 

package org.jfree.chart;

import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Paint;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.event.EventListenerList;
import org.jfree.chart.event.ChartChangeEvent;
import org.jfree.chart.event.ChartChangeListener;
import org.jfree.chart.event.ChartProgressEvent;
import org.jfree.chart.event.ChartProgressListener;
import org.jfree.chart.event.LegendChangeEvent;
import org.jfree.chart.event.LegendChangeListener;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.event.PlotChangeListener;
import org.jfree.chart.event.TitleChangeEvent;
import org.jfree.chart.event.TitleChangeListener;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.io.SerialUtilities;
import org.jfree.ui.Align;
import org.jfree.ui.Drawable;
import org.jfree.ui.about.ProjectInfo;
import org.jfree.util.ObjectUtils;

// Referenced classes of package org.jfree.chart:
//            TextTitle, AbstractTitle, JFreeChartInfo, JFreeChartConstants, 
//            Legend, ChartRenderingInfo

public class JFreeChart
    implements JFreeChartConstants, Drawable, TitleChangeListener, LegendChangeListener, PlotChangeListener, Serializable
{

    public JFreeChart(Plot plot1)
    {
        this(null, null, plot1, false);
    }

    public JFreeChart(String s, Plot plot1)
    {
        this(s, JFreeChartConstants.DEFAULT_TITLE_FONT, plot1, true);
    }

    public JFreeChart(String s, Font font, Plot plot1, boolean flag)
    {
        backgroundImageAlignment = 15;
        backgroundImageAlpha = 0.5F;
        progressListeners = new EventListenerList();
        changeListeners = new EventListenerList();
        notify = true;
        borderVisible = false;
        borderStroke = new BasicStroke(1.0F);
        borderPaint = Color.black;
        plot = plot1;
        plot1.addChangeListener(this);
        subtitles = new ArrayList();
        if(flag)
        {
            legend = Legend.createInstance(this);
            legend.addChangeListener(this);
        }
        if(s != null)
        {
            if(font == null)
                font = JFreeChartConstants.DEFAULT_TITLE_FONT;
            title = new TextTitle(s, font);
            title.addChangeListener(this);
        }
        antialias = true;
        backgroundPaint = JFreeChartConstants.DEFAULT_BACKGROUND_PAINT;
        backgroundImage = JFreeChartConstants.DEFAULT_BACKGROUND_IMAGE;
        backgroundImageAlignment = 15;
        backgroundImageAlpha = 0.5F;
    }

    public boolean isBorderVisible()
    {
        return borderVisible;
    }

    public void setBorderVisible(boolean flag)
    {
        borderVisible = flag;
        fireChartChanged();
    }

    public Stroke getBorderStroke()
    {
        return borderStroke;
    }

    public void setBorderStroke(Stroke stroke)
    {
        borderStroke = stroke;
        fireChartChanged();
    }

    public Paint getBorderPaint()
    {
        return borderPaint;
    }

    public void setBorderPaint(Paint paint)
    {
        borderPaint = paint;
        fireChartChanged();
    }

    public TextTitle getTitle()
    {
        return title;
    }

    public void setTitle(TextTitle texttitle)
    {
        title = texttitle;
        fireChartChanged();
    }

    public void setTitle(String s)
    {
        if(s != null)
        {
            if(title == null)
                setTitle(new TextTitle(s, JFreeChartConstants.DEFAULT_TITLE_FONT));
            else
                title.setText(s);
        } else
        {
            setTitle((TextTitle)null);
        }
    }

    public java.util.List getSubtitles()
    {
        return subtitles;
    }

    public void setSubtitles(java.util.List list)
    {
        subtitles = list;
        fireChartChanged();
    }

    public int getSubtitleCount()
    {
        return subtitles.size();
    }

    public AbstractTitle getSubtitle(int i)
    {
        if(i < 0 || i == getSubtitleCount())
            throw new IllegalArgumentException("JFreeChart.getSubtitle(...): index out of range.");
        else
            return (AbstractTitle)subtitles.get(i);
    }

    public void addSubtitle(AbstractTitle abstracttitle)
    {
        if(abstracttitle != null)
        {
            subtitles.add(abstracttitle);
            abstracttitle.addChangeListener(this);
            fireChartChanged();
        }
    }

    public Legend getLegend()
    {
        return legend;
    }

    public void setLegend(Legend legend1)
    {
        Legend legend2 = legend;
        if(legend2 != null)
            legend2.removeChangeListener(this);
        legend = legend1;
        if(legend1 != null)
            legend1.addChangeListener(this);
        fireChartChanged();
    }

    public Plot getPlot()
    {
        return plot;
    }

    public CategoryPlot getCategoryPlot()
    {
        return (CategoryPlot)plot;
    }

    public XYPlot getXYPlot()
    {
        return (XYPlot)plot;
    }

    public boolean getAntiAlias()
    {
        return antialias;
    }

    public void setAntiAlias(boolean flag)
    {
        if(antialias != flag)
        {
            antialias = flag;
            fireChartChanged();
        }
    }

    public Paint getBackgroundPaint()
    {
        return backgroundPaint;
    }

    public void setBackgroundPaint(Paint paint)
    {
        if(backgroundPaint != null)
        {
            if(!backgroundPaint.equals(paint))
            {
                backgroundPaint = paint;
                fireChartChanged();
            }
        } else
        if(paint != null)
        {
            backgroundPaint = paint;
            fireChartChanged();
        }
    }

    public Image getBackgroundImage()
    {
        return backgroundImage;
    }

    public void setBackgroundImage(Image image)
    {
        if(backgroundImage != null)
        {
            if(!backgroundImage.equals(image))
            {
                backgroundImage = image;
                fireChartChanged();
            }
        } else
        if(image != null)
        {
            backgroundImage = image;
            fireChartChanged();
        }
    }

    public int getBackgroundImageAlignment()
    {
        return backgroundImageAlignment;
    }

    public void setBackgroundImageAlignment(int i)
    {
        if(backgroundImageAlignment != i)
        {
            backgroundImageAlignment = i;
            fireChartChanged();
        }
    }

    public float getBackgroundImageAlpha()
    {
        return backgroundImageAlpha;
    }

    public void setBackgroundImageAlpha(float f)
    {
        if(backgroundImageAlpha != f)
        {
            backgroundImageAlpha = f;
            fireChartChanged();
        }
    }

    public boolean isNotify()
    {
        return notify;
    }

    public void setNotify(boolean flag)
    {
        notify = flag;
        if(flag)
            notifyListeners(new ChartChangeEvent(this));
    }

    public void draw(Graphics2D graphics2d, Rectangle2D rectangle2d)
    {
        draw(graphics2d, rectangle2d, null);
    }

    public void draw(Graphics2D graphics2d, Rectangle2D rectangle2d, ChartRenderingInfo chartrenderinginfo)
    {
        notifyListeners(new ChartProgressEvent(this, this, 1, 0));
        if(chartrenderinginfo != null)
        {
            chartrenderinginfo.clear();
            chartrenderinginfo.setChartArea(rectangle2d);
        }
        java.awt.Shape shape = graphics2d.getClip();
        graphics2d.clip(rectangle2d);
        if(antialias)
            graphics2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        else
            graphics2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
        if(backgroundPaint != null)
        {
            graphics2d.setPaint(backgroundPaint);
            graphics2d.fill(rectangle2d);
        }
        if(backgroundImage != null)
        {
            java.awt.Composite composite = graphics2d.getComposite();
            graphics2d.setComposite(AlphaComposite.getInstance(3, backgroundImageAlpha));
            java.awt.geom.Rectangle2D.Double double2 = new java.awt.geom.Rectangle2D.Double(0.0D, 0.0D, backgroundImage.getWidth(null), backgroundImage.getHeight(null));
            Align.align(double2, rectangle2d, backgroundImageAlignment);
            graphics2d.drawImage(backgroundImage, (int)double2.getX(), (int)double2.getY(), (int)double2.getWidth(), (int)double2.getHeight(), null);
            graphics2d.setComposite(composite);
        }
        if(isBorderVisible())
        {
            Paint paint = getBorderPaint();
            Stroke stroke = getBorderStroke();
            if(paint != null && stroke != null)
            {
                java.awt.geom.Rectangle2D.Double double3 = new java.awt.geom.Rectangle2D.Double(rectangle2d.getX(), rectangle2d.getY(), rectangle2d.getWidth() - 1.0D, rectangle2d.getHeight() - 1.0D);
                graphics2d.setPaint(paint);
                graphics2d.setStroke(stroke);
                graphics2d.draw(double3);
            }
        }
        java.awt.geom.Rectangle2D.Double double1 = new java.awt.geom.Rectangle2D.Double();
        double1.setRect(rectangle2d);
        if(title != null)
            drawTitle(title, graphics2d, double1);
        AbstractTitle abstracttitle;
        for(Iterator iterator = subtitles.iterator(); iterator.hasNext(); drawTitle(abstracttitle, graphics2d, double1))
            abstracttitle = (AbstractTitle)iterator.next();

        java.awt.geom.Rectangle2D.Double double4 = double1;
        if(legend != null)
            double4.setRect(legend.draw(graphics2d, double1, chartrenderinginfo));
        plot.draw(graphics2d, double4, chartrenderinginfo);
        graphics2d.setClip(shape);
        notifyListeners(new ChartProgressEvent(this, this, 2, 100));
    }

    public void drawTitle(AbstractTitle abstracttitle, Graphics2D graphics2d, Rectangle2D rectangle2d)
    {
        java.awt.geom.Rectangle2D.Double double1 = new java.awt.geom.Rectangle2D.Double();
        double d = 0.0D;
        double d5 = 0.0D;
        switch(abstracttitle.getPosition())
        {
        case 0: // '\0'
            double d1 = Math.min(abstracttitle.getPreferredHeight(graphics2d), rectangle2d.getHeight());
            double d6 = rectangle2d.getWidth();
            double1.setRect(rectangle2d.getX(), rectangle2d.getY(), d6, d1);
            abstracttitle.draw(graphics2d, double1);
            rectangle2d.setRect(rectangle2d.getX(), Math.min(rectangle2d.getY() + d1, rectangle2d.getMaxY()), d6, Math.max(rectangle2d.getHeight() - d1, 0.0D));
            break;

        case 1: // '\001'
            double d2 = Math.min(abstracttitle.getPreferredHeight(graphics2d), rectangle2d.getHeight());
            double d7 = rectangle2d.getWidth();
            double1.setRect(rectangle2d.getX(), rectangle2d.getMaxY() - d2, d7, d2);
            abstracttitle.draw(graphics2d, double1);
            rectangle2d.setRect(rectangle2d.getX(), rectangle2d.getY(), d7, rectangle2d.getHeight() - d2);
            break;

        case 2: // '\002'
            double d3 = rectangle2d.getHeight();
            double d8 = Math.min(abstracttitle.getPreferredWidth(graphics2d), rectangle2d.getWidth());
            double1.setRect(rectangle2d.getMaxX() - d8, rectangle2d.getY(), d8, d3);
            abstracttitle.draw(graphics2d, double1);
            rectangle2d.setRect(rectangle2d.getX(), rectangle2d.getY(), rectangle2d.getWidth() - d8, d3);
            break;

        case 3: // '\003'
            double d4 = rectangle2d.getHeight();
            double d9 = Math.min(abstracttitle.getPreferredWidth(graphics2d), rectangle2d.getWidth());
            double1.setRect(rectangle2d.getX(), rectangle2d.getY(), d9, d4);
            abstracttitle.draw(graphics2d, double1);
            rectangle2d.setRect(rectangle2d.getX() + d9, rectangle2d.getY(), rectangle2d.getWidth() - d9, d4);
            break;

        default:
            throw new RuntimeException("JFreeChart.draw(...): unknown title position.");
        }
    }

    public BufferedImage createBufferedImage(int i, int j)
    {
        return createBufferedImage(i, j, null);
    }

    public BufferedImage createBufferedImage(int i, int j, ChartRenderingInfo chartrenderinginfo)
    {
        BufferedImage bufferedimage = new BufferedImage(i, j, 1);
        Graphics2D graphics2d = bufferedimage.createGraphics();
        draw(graphics2d, new java.awt.geom.Rectangle2D.Double(0.0D, 0.0D, i, j), chartrenderinginfo);
        graphics2d.dispose();
        return bufferedimage;
    }

    public void handleClick(int i, int j, ChartRenderingInfo chartrenderinginfo)
    {
        plot.handleClick(i, j, chartrenderinginfo);
    }

    public void addChangeListener(ChartChangeListener chartchangelistener)
    {
        changeListeners.add(org.jfree.chart.event.ChartChangeListener.class, chartchangelistener);
    }

    public void removeChangeListener(ChartChangeListener chartchangelistener)
    {
        changeListeners.remove(org.jfree.chart.event.ChartChangeListener.class, chartchangelistener);
    }

    protected void fireChartChanged()
    {
        ChartChangeEvent chartchangeevent = new ChartChangeEvent(this);
        notifyListeners(chartchangeevent);
    }

    protected void notifyListeners(ChartChangeEvent chartchangeevent)
    {
        if(notify)
        {
            Object aobj[] = changeListeners.getListenerList();
            for(int i = aobj.length - 2; i >= 0; i -= 2)
                if(aobj[i] == (org.jfree.chart.event.ChartChangeListener.class))
                    ((ChartChangeListener)aobj[i + 1]).chartChanged(chartchangeevent);

        }
    }

    public void addProgressListener(ChartProgressListener chartprogresslistener)
    {
        progressListeners.add(org.jfree.chart.event.ChartProgressListener.class, chartprogresslistener);
    }

    public void removeProgressListener(ChartProgressListener chartprogresslistener)
    {
        progressListeners.remove(org.jfree.chart.event.ChartProgressListener.class, chartprogresslistener);
    }

    protected void notifyListeners(ChartProgressEvent chartprogressevent)
    {
        Object aobj[] = progressListeners.getListenerList();
        for(int i = aobj.length - 2; i >= 0; i -= 2)
            if(aobj[i] == (org.jfree.chart.event.ChartProgressListener.class))
                ((ChartProgressListener)aobj[i + 1]).chartProgress(chartprogressevent);

    }

    public void titleChanged(TitleChangeEvent titlechangeevent)
    {
        titlechangeevent.setChart(this);
        notifyListeners(titlechangeevent);
    }

    public void legendChanged(LegendChangeEvent legendchangeevent)
    {
        legendchangeevent.setChart(this);
        notifyListeners(legendchangeevent);
    }

    public void plotChanged(PlotChangeEvent plotchangeevent)
    {
        plotchangeevent.setChart(this);
        notifyListeners(plotchangeevent);
    }

    public boolean equals(Object obj)
    {
        if(obj == null)
            return false;
        if(obj == this)
            return true;
        if(obj instanceof JFreeChart)
        {
            JFreeChart jfreechart = (JFreeChart)obj;
            boolean flag = ObjectUtils.equalOrBothNull(title, jfreechart.title);
            boolean flag1 = ObjectUtils.equalOrBothNull(subtitles, jfreechart.subtitles);
            boolean flag2 = ObjectUtils.equalOrBothNull(legend, jfreechart.legend);
            boolean flag3 = ObjectUtils.equalOrBothNull(plot, jfreechart.plot);
            boolean flag4 = antialias == jfreechart.antialias;
            boolean flag5 = ObjectUtils.equalOrBothNull(backgroundPaint, jfreechart.backgroundPaint);
            boolean flag6 = ObjectUtils.equalOrBothNull(backgroundImage, jfreechart.backgroundImage);
            boolean flag7 = backgroundImageAlignment == jfreechart.backgroundImageAlignment;
            boolean flag8 = backgroundImageAlpha == jfreechart.backgroundImageAlpha;
            boolean flag9 = notify == jfreechart.notify;
            return flag && flag1 && flag2 && flag3 && flag4 && flag5 && flag6 && flag7 && flag8 && flag9;
        } else
        {
            return false;
        }
    }

    private void writeObject(ObjectOutputStream objectoutputstream)
        throws IOException
    {
        objectoutputstream.defaultWriteObject();
        SerialUtilities.writePaint(backgroundPaint, objectoutputstream);
    }

    private void readObject(ObjectInputStream objectinputstream)
        throws IOException, ClassNotFoundException
    {
        objectinputstream.defaultReadObject();
        backgroundPaint = SerialUtilities.readPaint(objectinputstream);
        progressListeners = new EventListenerList();
        changeListeners = new EventListenerList();
        if(title != null)
            title.addChangeListener(this);
        for(int i = 0; i < getSubtitleCount(); i++)
            getSubtitle(i).addChangeListener(this);

        if(legend != null)
            legend.addChangeListener(this);
        if(plot != null)
            plot.addChangeListener(this);
    }

    public static void main(String args[])
    {
        System.out.println(INFO.toString());
    }

    /**
     * @deprecated Method getSuppressChartChangeEvents is deprecated
     */

    public boolean getSuppressChartChangeEvents()
    {
        return isNotify();
    }

    /**
     * @deprecated Method setSuppressChartChangeEvents is deprecated
     */

    public void setSuppressChartChangeEvents(boolean flag)
    {
        setNotify(!flag);
    }

    public static final ProjectInfo INFO = new JFreeChartInfo();
    private boolean borderVisible;
    private Stroke borderStroke;
    private Paint borderPaint;
    private TextTitle title;
    private java.util.List subtitles;
    private Legend legend;
    private Plot plot;
    private boolean antialias;
    private transient Paint backgroundPaint;
    private transient Image backgroundImage;
    private int backgroundImageAlignment;
    private float backgroundImageAlpha;
    private transient EventListenerList changeListeners;
    private transient EventListenerList progressListeners;
    private boolean notify;

}